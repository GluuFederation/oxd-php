<?php
/**
 * Created by PhpStorm.
 * User: Vlad Karapetyan
 * Date: 11/9/2015
 * Time: 4:15 PM
 */
require_once 'Client_Socket_OXD.php';
require_once 'Oxd_config.php';

abstract class Client_oxd extends Client_Socket_OXD{

    private $command_types = array( 'register_client', 'client_read', 'obtain_pat', 'obtain_aat',
                                    'obtain_rpt', 'authorize_rpt', 'register_resource', 'rpt_status',
                                    'id_token_status', 'access_token_status', 'register_ticket', 'discovery',
                                    'authorization_code_flow', 'get_authorization_url', 'get_tokens_by_code',
                                    'get_user_info', 'register_site',
    );
    protected $data = array();
    protected $command;
    protected $params = array();
    protected $resp_json;
    protected $resp_object;
    protected $resp_status;
    protected $resp_data = array();


    /**
     * abstract Client_oxd constructor.
     */
    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->setCommand();
        $exist = false;
        for ($i = 0; $i < count($this->command_types); $i++) {

            if ($this->command_types[$i] == $this->getCommand()) {
                $exist = true;
                break;
            }
        }

        if (!$exist) {
            $this->log('Command: ' . $this->getCommand() . ' is not exist!','Exiting process.');
            $this->error_message('Command: ' . $this->getCommand() . ' is not exist!');
        }
    }

    /**
     * send function sends the command to the oxD server.
     * Args:
     * command (dict) - Dict representation of the JSON command string
     **/
    public function request()
    {
        $this->setParams();

        $jsondata = json_encode($this->getData(), JSON_UNESCAPED_SLASHES);
        if(!$this->is_JSON($jsondata)){
            $this->log("Sending parameters must be JSON.",'Exiting process.');
            $this->error_message('Sending parameters must be JSON.');
        }
        $lenght = strlen($jsondata);
        if($lenght<=0){
            $this->log("Length must be more than zero.",'Exiting process.');
            $this->error_message("Length must be more than zero.");
        }else{
            $lenght = $lenght <= 999 ? "0" . $lenght : $lenght;
        }
        $this->oxd_socket_request(utf8_encode($lenght . $jsondata));
        $this->resp_json = $this->oxd_socket_response();

        $this->resp_json = str_replace(substr($this->resp_json, 0, 4), "", $this->resp_json);

        if ($this->resp_json) {
            $object = json_decode($this->resp_json);
            if ($object->status == 'error') {
                $this->error_message($object->data->error . ' : ' . $object->data->error_description);
            } elseif ($object->status == 'ok') {
                $this->resp_object = json_decode($this->resp_json);
                $this->setRespParam();
            }
        } else {
            $this->log("Response is empty...",'Exiting process.');
            $this->error_message('Response is empty...');
        }
    }

    /**
     * @return mixed
     */
    public function getRespStatus()
    {
        return $this->resp_status;
    }

    /**
     * @param mixed $resp_status
     */
    public function setRespStatus()
    {
        $this->resp_status = $this->getRespObject()->status;
    }

    /**
     * @return mixed
     */
    public function getRespData()
    {
        if (!$this->getRespObject()) {
            $this->resp_data = 'Data is empty';
            $this->error_message($this->resp_data);
        } else {
            $this->resp_data = $this->getRespObject()->data;
        }
        return $this->resp_data;
    }

    /**
     * @return array
     */
    public function getData()
    {
        $this->data = array('command' => $this->getCommand(), 'params' => $this->getParams());
        return $this->data;
    }

    /**
     * @return string
     */
    public function getCommand()
    {
        return $this->command;
    }

    /**
     * @param string $command
     */
    abstract function setCommand();

    /**
     * getResult function geting result from oxD server.
     * Return: resp_object - The JSON response parsing to object
     **/
    public function getRespObject()
    {
        return $this->resp_object;
    }

    /**
     * function getting result from oxD server.
     * return: resp_json - The JSON response from the oxD Server
     **/
    public function getRespJSON()
    {
        return $this->resp_json;
    }

    /**
     * @param array $params
     */
    abstract function setParams();
    /**
     * @param array $params
     */
    abstract function setRespParam();
    /**
     * @return array
     */
    public function getParams()
    {
        return $this->params;
    }

    /**
     * checking format string.
     * @param  string  $string
     * @return bool
     **/
    public function is_JSON($string){
        return is_string($string) && is_object(json_decode($string)) ? true : false;
    }

}